;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-abbr-reader.ss" "lang")((modname a06q4) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ())))
;;
;;************************************************
;;
;; CS 115 Assignment 06, Question 4
;; Tianlu Zhu
;; (checking sublist)
;;
;;************************************************

;; constants for testing
(define list1 (list 1 2))
(define list2 (list 1 2 3))
(define list3 (list 2 3 3))
(define list4 (list 2 3 5))
(define list5 (list 1 2 4 5 3))
(define list6 (list 2 2 3 1 2 3 4))
(define list7 (list 2 3 3 1 2 4 5 3))
(define list8 (list 2 4 5 3 1))

;; Helper functions

;; sublist : (listof num)[nonempty] (listof num) -> listof num[nonempty]
;; Purpose: produces sublist of first given list list2 with the same length
;; of second given list lst1
;; Examples:
;; (sublist list2 list1) => list1
;; (sublist list6 list2) => (list 2 2 3)
(define (sublist lst2 lst1)
  (cond
    [(empty? lst1) empty]
    [else (append (list (first lst2)) (sublist (rest lst2) (rest lst1)))]))
;; Tests for sublist
(check-expect (sublist list1 empty) empty)
(check-expect (sublist list2 list1) list1)
(check-expect (sublist list6 list2) (list 2 2 3))
(check-expect (sublist list8 list4) (list 2 4 5))
(check-expect (sublist list5 list3) (list 1 2 4))
(check-expect (sublist list7 list6) (list 2 3 3 1 2 4 5))
(check-expect (sublist (list 1.8 2.5 3.7) (list 1.1 1.2)) (list 1.8 2.5))

;; check-sublist : (listof num) (listof num)[nonempty] -> boolean
;; Purpose: produces a boolean indicating whether the first n elements of 
;; sub-lst2 is the same as lst1. n is the length of lst1
;; Examples
;; (check-sublist list1 list2) => true
;; (check-sublist list4 list8) => false
(define (check-sublist lst1 sub-lst2)
  (cond
    [(empty? lst1) true]
    [(= (first lst1) (first sub-lst2))
     (check-sublist (rest lst1) (rest sub-lst2))]
    [else false]))
;; Tests for check-sublist
(check-expect (check-sublist empty list6) true)
(check-expect (check-sublist list1 list2) true)
(check-expect (check-sublist list4 list8) false)
(check-expect (check-sublist list1 list4) false)
(check-expect (check-sublist list3 list7) true)
(check-expect (check-sublist list1 list5) true)
(check-expect (check-sublist (list 1.1) (list 1.1 3.1 2.1)) true)
(check-expect (check-sublist (list 1.1) (list 3.1 0.1 2.1)) false) 

;; sublist? : (listof num) (listof num) -> listof num

;; Purpose: produces a boolean indicating whether the given list lst2
;; contains all elements in the given list lst1 and in the same order

;; Examples
;; (sublist? empty list4) => true
;; (sublist? list2 empty) => false
;; (sublist? list2 list6) => true
;; (sublist? list3 list5) => false

(define (sublist? lst1 lst2)
  (cond
    [(empty? lst1) true]
    [(empty? lst2) false] ;this ensures that in helper functions lst2 is always nonempty
    [(= (first lst1) (first lst2)) ;the previous conditions ensure that lst2 is always not shorter than lst1
     (cond
       [(check-sublist lst1 (sublist lst2 lst1)) true]
       [else (sublist? lst1 (rest lst2))])] 
    [else (sublist? lst1 (rest lst2))]))

;; Tests for sublist?
(check-expect (sublist? empty list4) true)
(check-expect (sublist? list2 empty) false)
(check-expect (sublist? list2 list6) true)
(check-expect (sublist? list3 list5) false)
(check-expect (sublist? list1 list2) true)
(check-expect (sublist? (list 1.1 1.2 1.3 0.5 0.8)
                        (list 1.8 1.1 1.2 1.3 0.5 0.8 2.8)) true)
(check-expect (sublist? (list 0.5 0.2 0.3 5.4 4.6 9.8)
                        (list 1.2 4.6 5.8 4.9 0.6 1.7 3.4)) false)

